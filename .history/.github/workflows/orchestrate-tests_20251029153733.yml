name: Test Copilot PAT
on:
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Verify token works
        env:
          TOKEN: ${{ secrets.COPILOT_PAT }}
        run: |
          curl -H "Authorization: bearer $TOKEN" \
               -H "Content-Type: application/json" \
               -d '{"query":"{ viewer { login } }"}' \
               https://api.github.com/graphql
      
      - name: Check current assignees before
        env:
          TOKEN: ${{ secrets.COPILOT_PAT }}
        run: |
          echo "Assignees BEFORE assignment:"
          curl -s -H "Authorization: token $TOKEN" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/${{ github.repository }}/issues/31 | \
          jq '.assignees'
      
      - name: Assign using GraphQL (alternative method)
        env:
          TOKEN: ${{ secrets.COPILOT_PAT }}
        run: |
          echo "Getting Bot ID and Issue ID..."
          
          # Get Bot ID
          BOT_RESPONSE=$(curl -s -H "Authorization: bearer $TOKEN" \
               -H "Content-Type: application/json" \
               -d '{"query":"{ repository(owner: \"${{ github.repository_owner }}\", name: \"${{ github.event.repository.name }}\") { suggestedActors(capabilities: [CAN_BE_ASSIGNED], first: 100) { nodes { login __typename ... on Bot { id } } } } }"}' \
               https://api.github.com/graphql)
          
          BOT_ID=$(echo "$BOT_RESPONSE" | jq -r '.data.repository.suggestedActors.nodes[] | select(.login == "copilot-swe-agent") | .id')
          echo "Bot ID: $BOT_ID"
          
          # Get Issue ID
          ISSUE_RESPONSE=$(curl -s -H "Authorization: bearer $TOKEN" \
               -H "Content-Type: application/json" \
               -d '{"query":"{ repository(owner: \"${{ github.repository_owner }}\", name: \"${{ github.event.repository.name }}\") { issue(number: 31) { id title } } }"}' \
               https://api.github.com/graphql)
          
          ISSUE_ID=$(echo "$ISSUE_RESPONSE" | jq -r '.data.repository.issue.id')
          echo "Issue ID: $ISSUE_ID"
          
          # Assign using addAssigneesToAssignable mutation
          echo "Attempting assignment with addAssigneesToAssignable..."
          ASSIGN_RESPONSE=$(curl -s -H "Authorization: bearer $TOKEN" \
               -H "Content-Type: application/json" \
               -d "{\"query\":\"mutation { addAssigneesToAssignable(input: {assignableId: \\\"$ISSUE_ID\\\", assigneeIds: [\\\"$BOT_ID\\\"]}) { assignable { ... on Issue { id title assignees(first: 10) { nodes { login } } } } } }\"}" \
               https://api.github.com/graphql)
          
          echo "Assignment response:"
          echo "$ASSIGN_RESPONSE" | jq '.'
      
      - name: Wait and check assignees after
        env:
          TOKEN: ${{ secrets.COPILOT_PAT }}
        run: |
          echo "Waiting 3 seconds for assignment to propagate..."
          sleep 3
          
          echo "Assignees AFTER assignment:"
          curl -s -H "Authorization: token $TOKEN" \
               -H "Accept: application/vnd.github+json" \
               https://api.github.com/repos/${{ github.repository }}/issues/31 | \
          jq '.assignees[] | {login: .login, type: .type}'